import 'package:flutter_reference/domain/entity/playground_entity.dart';
import 'package:freezed_annotation/freezed_annotation.dart';

part "product.freezed.dart";
part 'product.g.dart';

/// Represents a unique product along with its quantity in stock.
@freezed
class Product with _$Product implements PlaygroundEntity {
  const factory Product({
    /// The product's unique identifier.
    required String id,

    /// The product's readable name.
    required String name,

    /// A detailed description of the product.
    required String description,

    /// The product's amount in stock.
    required int stockAmount,

    /// The product's unit of measure.
    required String unit,

    /// The product's price per unit, in cents of Euro.
    ///
    /// For example, 2550 means 25 euros and 50 cents.
    /// This is merely an example, and you should store monetary quantities
    /// according to what is most appropriate to your project.
    ///
    /// The reason why I'm using Euro is to demonstrate formatting. Euro uses
    /// a decimal comma (ex.: 1,50 €, NOT €1.50). Because the default decimal
    /// separator in programming languages is the dot (.), using commas requires
    /// additional logic. Writing this example with American Dollars would be
    /// too easy and less useful.
    ///
    /// Many other currencies use the comma as the decimal separator, like the
    /// Argentine Peso or the Brazilian Real.
    required int pricePerUnitCents,
  }) = _Product;

  factory Product.fromJson(Map<String, Object?> json) =>
      _$ProductFromJson(json);
}

/// This class uses freezed. If you don't know how to use it, read the
/// official documentation first; note that these classes reference code
/// generated by freezed, so the first time you write a class, your editor
/// will tell you that there are errors. You have to run
/// `flutter pub run build_runner build` in the terminal.
///
/// The important parts are: include the "part" statement at the top (you'll
/// have to write the name by hand without autocomplete the first time
/// because the file won't exist yet); add "with _Class" after the class
/// declaration, and then write a factory constructor with "= _Class" after it.
/// Classes created this way will be immutable.
///
/// You can also write the fromJson factory and include the .g.dart file at the
/// top. This is recommended. You'll automatically get a toJson() implementation
/// as well.
